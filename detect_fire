from keras.models import load_model
import numpy as np
import os
import cv2
from ultralytics import YOLO
import argparse
  
# Загрузка модуля чтобы принимать адрес видео в качестве аргумента
parser = argparse.ArgumentParser()
parser.add_argument("-u", "--url", required=True, help="URL видео для анализа")
args = parser.parse_args()
video_url = args.url

# Загрузка модели
#model_YOLO = YOLO('weights/best_150_n.pt')
model_LSTM = load_model('weights/model_LSTM_17_1000_5.h5')
crop_dir_name="ultralytics_crop"

# Функция получения кадров огня
def extract_objects(input_path, crop_dir_name="ultralytics_crop", resize_dim=(64, 64)):
    model = YOLO('weights/best_150_n.pt')
    cap = cv2.VideoCapture(input_path)
    assert cap.isOpened(), "Error reading video file"
    
    if not os.path.exists(crop_dir_name):
        os.mkdir(crop_dir_name)

    idx = 0
    extracted_images = []
    while cap.isOpened():
        success, im0 = cap.read()
        if not success:
            print("Video frame is empty or video processing has been successfully completed.")
            break

        results = model.predict(im0, show=False)
        boxes = results[0].boxes.xyxy.cpu().tolist()

        if boxes:
            for box in boxes:
                idx += 1
                crop_obj = im0[int(box[1]):int(box[3]), int(box[0]):int(box[2])]
                resized_crop_obj = cv2.resize(crop_obj, resize_dim)
                extracted_images.append(resized_crop_obj)
                
                if len(extracted_images) >= 30:
                    return extracted_images[:30]

    cap.release()

          
# Функция определения огня
def predict_fire(sequence):
    data = np.vstack(sequence)

    if data.size == 30 * 64 * 64 * 3:
        data = data.reshape(-1, 30, 64, 64, 3)
        predictions = model_LSTM.predict(data)
        if predictions[0][0] >= 0.5:
            print('FIRE!!!')
        else:
            print('No fire.')
 #       print("Predicted fire probability:", round(predictions[0][0], 2))
    else:
        print("Невозможно выполнить предсказание, неверное количество данных")


# Функция запуска алгоритма 
def process_video_and_predict_fire(input_path):
    sequence = extract_objects(input_path)
    if sequence and len(sequence) == 30:
        predict_fire(sequence)
    else:
        print("Недостаточно данных для анализа")

# Запуск
process_video_and_predict_fire(video_url)
